// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2023 23:13:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [16:0] bits17;
// wires                                               
wire [31:0] bits32;

// assign statements (if any)                          
SX i1 (
// port map - connection between master ports and signals/registers   
	.bits17(bits17),
	.bits32(bits32)
);
initial 
begin 
#1000000 $finish;
end 
// bits17[ 16 ]
initial
begin
	bits17[16] = 1'b1;
	bits17[16] = #500000 1'b0;
end 
// bits17[ 15 ]
initial
begin
	bits17[15] = 1'b0;
	bits17[15] = #500000 1'b1;
end 
// bits17[ 14 ]
initial
begin
	bits17[14] = 1'b1;
end 
// bits17[ 13 ]
initial
begin
	bits17[13] = 1'b1;
end 
// bits17[ 12 ]
initial
begin
	bits17[12] = 1'b1;
end 
// bits17[ 11 ]
initial
begin
	bits17[11] = 1'b0;
end 
// bits17[ 10 ]
initial
begin
	bits17[10] = 1'b1;
end 
// bits17[ 9 ]
initial
begin
	bits17[9] = 1'b1;
	bits17[9] = #500000 1'b0;
end 
// bits17[ 8 ]
initial
begin
	bits17[8] = 1'b1;
	bits17[8] = #500000 1'b0;
end 
// bits17[ 7 ]
initial
begin
	bits17[7] = 1'b1;
	bits17[7] = #500000 1'b0;
end 
// bits17[ 6 ]
initial
begin
	bits17[6] = 1'b1;
	bits17[6] = #500000 1'b0;
end 
// bits17[ 5 ]
initial
begin
	bits17[5] = 1'b1;
end 
// bits17[ 4 ]
initial
begin
	bits17[4] = 1'b1;
	bits17[4] = #500000 1'b0;
end 
// bits17[ 3 ]
initial
begin
	bits17[3] = 1'b0;
	bits17[3] = #500000 1'b1;
end 
// bits17[ 2 ]
initial
begin
	bits17[2] = 1'b1;
	bits17[2] = #500000 1'b0;
end 
// bits17[ 1 ]
initial
begin
	bits17[1] = 1'b1;
	bits17[1] = #500000 1'b0;
end 
// bits17[ 0 ]
initial
begin
	bits17[0] = 1'b1;
end 
endmodule

