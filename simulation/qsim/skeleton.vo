// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.0.0 Build 595 04/25/2017 SJ Lite Edition"

// DATE "10/22/2023 21:23:04"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module plus4 (
	in12,
	out12);
input 	[11:0] in12;
output 	[11:0] out12;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \out12[0]~output_o ;
wire \out12[1]~output_o ;
wire \out12[2]~output_o ;
wire \out12[3]~output_o ;
wire \out12[4]~output_o ;
wire \out12[5]~output_o ;
wire \out12[6]~output_o ;
wire \out12[7]~output_o ;
wire \out12[8]~output_o ;
wire \out12[9]~output_o ;
wire \out12[10]~output_o ;
wire \out12[11]~output_o ;
wire \in12[0]~input_o ;
wire \in12[1]~input_o ;
wire \in12[2]~input_o ;
wire \in12[3]~input_o ;
wire \comb_35|Add0~0_combout ;
wire \in12[4]~input_o ;
wire \comb_35|Add0~1 ;
wire \comb_35|Add0~2_combout ;
wire \in12[5]~input_o ;
wire \comb_35|Add0~3 ;
wire \comb_35|Add0~4_combout ;
wire \in12[6]~input_o ;
wire \comb_35|Add0~5 ;
wire \comb_35|Add0~6_combout ;
wire \in12[7]~input_o ;
wire \comb_35|Add0~7 ;
wire \comb_35|Add0~8_combout ;
wire \in12[8]~input_o ;
wire \comb_35|Add0~9 ;
wire \comb_35|Add0~10_combout ;
wire \in12[9]~input_o ;
wire \comb_35|Add0~11 ;
wire \comb_35|Add0~12_combout ;
wire \in12[10]~input_o ;
wire \comb_35|Add0~13 ;
wire \comb_35|Add0~14_combout ;
wire \in12[11]~input_o ;
wire \comb_35|Add0~15 ;
wire \comb_35|Add0~16_combout ;


cycloneive_io_obuf \out12[0]~output (
	.i(\in12[0]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[0]~output .bus_hold = "false";
defparam \out12[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[1]~output (
	.i(\in12[1]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[1]~output .bus_hold = "false";
defparam \out12[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[2]~output (
	.i(!\in12[2]~input_o ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[2]~output .bus_hold = "false";
defparam \out12[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[3]~output (
	.i(\comb_35|Add0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[3]~output .bus_hold = "false";
defparam \out12[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[4]~output (
	.i(\comb_35|Add0~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[4]~output .bus_hold = "false";
defparam \out12[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[5]~output (
	.i(\comb_35|Add0~4_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[5]~output .bus_hold = "false";
defparam \out12[5]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[6]~output (
	.i(\comb_35|Add0~6_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[6]~output .bus_hold = "false";
defparam \out12[6]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[7]~output (
	.i(\comb_35|Add0~8_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[7]~output .bus_hold = "false";
defparam \out12[7]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[8]~output (
	.i(\comb_35|Add0~10_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[8]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[8]~output .bus_hold = "false";
defparam \out12[8]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[9]~output (
	.i(\comb_35|Add0~12_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[9]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[9]~output .bus_hold = "false";
defparam \out12[9]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[10]~output (
	.i(\comb_35|Add0~14_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[10]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[10]~output .bus_hold = "false";
defparam \out12[10]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out12[11]~output (
	.i(\comb_35|Add0~16_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out12[11]~output_o ),
	.obar());
// synopsys translate_off
defparam \out12[11]~output .bus_hold = "false";
defparam \out12[11]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \in12[0]~input (
	.i(in12[0]),
	.ibar(gnd),
	.o(\in12[0]~input_o ));
// synopsys translate_off
defparam \in12[0]~input .bus_hold = "false";
defparam \in12[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in12[1]~input (
	.i(in12[1]),
	.ibar(gnd),
	.o(\in12[1]~input_o ));
// synopsys translate_off
defparam \in12[1]~input .bus_hold = "false";
defparam \in12[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in12[2]~input (
	.i(in12[2]),
	.ibar(gnd),
	.o(\in12[2]~input_o ));
// synopsys translate_off
defparam \in12[2]~input .bus_hold = "false";
defparam \in12[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \in12[3]~input (
	.i(in12[3]),
	.ibar(gnd),
	.o(\in12[3]~input_o ));
// synopsys translate_off
defparam \in12[3]~input .bus_hold = "false";
defparam \in12[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~0 (
// Equation(s):
// \comb_35|Add0~0_combout  = (\in12[3]~input_o  & (\in12[2]~input_o  $ (VCC))) # (!\in12[3]~input_o  & (\in12[2]~input_o  & VCC))
// \comb_35|Add0~1  = CARRY((\in12[3]~input_o  & \in12[2]~input_o ))

	.dataa(\in12[3]~input_o ),
	.datab(\in12[2]~input_o ),
	.datac(gnd),
	.datad(vcc),
	.cin(gnd),
	.combout(\comb_35|Add0~0_combout ),
	.cout(\comb_35|Add0~1 ));
// synopsys translate_off
defparam \comb_35|Add0~0 .lut_mask = 16'h6688;
defparam \comb_35|Add0~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \in12[4]~input (
	.i(in12[4]),
	.ibar(gnd),
	.o(\in12[4]~input_o ));
// synopsys translate_off
defparam \in12[4]~input .bus_hold = "false";
defparam \in12[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~2 (
// Equation(s):
// \comb_35|Add0~2_combout  = (\in12[4]~input_o  & (!\comb_35|Add0~1 )) # (!\in12[4]~input_o  & ((\comb_35|Add0~1 ) # (GND)))
// \comb_35|Add0~3  = CARRY((!\comb_35|Add0~1 ) # (!\in12[4]~input_o ))

	.dataa(\in12[4]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~1 ),
	.combout(\comb_35|Add0~2_combout ),
	.cout(\comb_35|Add0~3 ));
// synopsys translate_off
defparam \comb_35|Add0~2 .lut_mask = 16'h5A5F;
defparam \comb_35|Add0~2 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[5]~input (
	.i(in12[5]),
	.ibar(gnd),
	.o(\in12[5]~input_o ));
// synopsys translate_off
defparam \in12[5]~input .bus_hold = "false";
defparam \in12[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~4 (
// Equation(s):
// \comb_35|Add0~4_combout  = (\in12[5]~input_o  & (\comb_35|Add0~3  $ (GND))) # (!\in12[5]~input_o  & (!\comb_35|Add0~3  & VCC))
// \comb_35|Add0~5  = CARRY((\in12[5]~input_o  & !\comb_35|Add0~3 ))

	.dataa(\in12[5]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~3 ),
	.combout(\comb_35|Add0~4_combout ),
	.cout(\comb_35|Add0~5 ));
// synopsys translate_off
defparam \comb_35|Add0~4 .lut_mask = 16'hA50A;
defparam \comb_35|Add0~4 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[6]~input (
	.i(in12[6]),
	.ibar(gnd),
	.o(\in12[6]~input_o ));
// synopsys translate_off
defparam \in12[6]~input .bus_hold = "false";
defparam \in12[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~6 (
// Equation(s):
// \comb_35|Add0~6_combout  = (\in12[6]~input_o  & (!\comb_35|Add0~5 )) # (!\in12[6]~input_o  & ((\comb_35|Add0~5 ) # (GND)))
// \comb_35|Add0~7  = CARRY((!\comb_35|Add0~5 ) # (!\in12[6]~input_o ))

	.dataa(\in12[6]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~5 ),
	.combout(\comb_35|Add0~6_combout ),
	.cout(\comb_35|Add0~7 ));
// synopsys translate_off
defparam \comb_35|Add0~6 .lut_mask = 16'h5A5F;
defparam \comb_35|Add0~6 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[7]~input (
	.i(in12[7]),
	.ibar(gnd),
	.o(\in12[7]~input_o ));
// synopsys translate_off
defparam \in12[7]~input .bus_hold = "false";
defparam \in12[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~8 (
// Equation(s):
// \comb_35|Add0~8_combout  = (\in12[7]~input_o  & (\comb_35|Add0~7  $ (GND))) # (!\in12[7]~input_o  & (!\comb_35|Add0~7  & VCC))
// \comb_35|Add0~9  = CARRY((\in12[7]~input_o  & !\comb_35|Add0~7 ))

	.dataa(\in12[7]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~7 ),
	.combout(\comb_35|Add0~8_combout ),
	.cout(\comb_35|Add0~9 ));
// synopsys translate_off
defparam \comb_35|Add0~8 .lut_mask = 16'hA50A;
defparam \comb_35|Add0~8 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[8]~input (
	.i(in12[8]),
	.ibar(gnd),
	.o(\in12[8]~input_o ));
// synopsys translate_off
defparam \in12[8]~input .bus_hold = "false";
defparam \in12[8]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~10 (
// Equation(s):
// \comb_35|Add0~10_combout  = (\in12[8]~input_o  & (!\comb_35|Add0~9 )) # (!\in12[8]~input_o  & ((\comb_35|Add0~9 ) # (GND)))
// \comb_35|Add0~11  = CARRY((!\comb_35|Add0~9 ) # (!\in12[8]~input_o ))

	.dataa(\in12[8]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~9 ),
	.combout(\comb_35|Add0~10_combout ),
	.cout(\comb_35|Add0~11 ));
// synopsys translate_off
defparam \comb_35|Add0~10 .lut_mask = 16'h5A5F;
defparam \comb_35|Add0~10 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[9]~input (
	.i(in12[9]),
	.ibar(gnd),
	.o(\in12[9]~input_o ));
// synopsys translate_off
defparam \in12[9]~input .bus_hold = "false";
defparam \in12[9]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~12 (
// Equation(s):
// \comb_35|Add0~12_combout  = (\in12[9]~input_o  & (\comb_35|Add0~11  $ (GND))) # (!\in12[9]~input_o  & (!\comb_35|Add0~11  & VCC))
// \comb_35|Add0~13  = CARRY((\in12[9]~input_o  & !\comb_35|Add0~11 ))

	.dataa(\in12[9]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~11 ),
	.combout(\comb_35|Add0~12_combout ),
	.cout(\comb_35|Add0~13 ));
// synopsys translate_off
defparam \comb_35|Add0~12 .lut_mask = 16'hA50A;
defparam \comb_35|Add0~12 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[10]~input (
	.i(in12[10]),
	.ibar(gnd),
	.o(\in12[10]~input_o ));
// synopsys translate_off
defparam \in12[10]~input .bus_hold = "false";
defparam \in12[10]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~14 (
// Equation(s):
// \comb_35|Add0~14_combout  = (\in12[10]~input_o  & (!\comb_35|Add0~13 )) # (!\in12[10]~input_o  & ((\comb_35|Add0~13 ) # (GND)))
// \comb_35|Add0~15  = CARRY((!\comb_35|Add0~13 ) # (!\in12[10]~input_o ))

	.dataa(\in12[10]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\comb_35|Add0~13 ),
	.combout(\comb_35|Add0~14_combout ),
	.cout(\comb_35|Add0~15 ));
// synopsys translate_off
defparam \comb_35|Add0~14 .lut_mask = 16'h5A5F;
defparam \comb_35|Add0~14 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \in12[11]~input (
	.i(in12[11]),
	.ibar(gnd),
	.o(\in12[11]~input_o ));
// synopsys translate_off
defparam \in12[11]~input .bus_hold = "false";
defparam \in12[11]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \comb_35|Add0~16 (
// Equation(s):
// \comb_35|Add0~16_combout  = \in12[11]~input_o  $ (!\comb_35|Add0~15 )

	.dataa(\in12[11]~input_o ),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.cin(\comb_35|Add0~15 ),
	.combout(\comb_35|Add0~16_combout ),
	.cout());
// synopsys translate_off
defparam \comb_35|Add0~16 .lut_mask = 16'hA5A5;
defparam \comb_35|Add0~16 .sum_lutc_input = "cin";
// synopsys translate_on

assign out12[0] = \out12[0]~output_o ;

assign out12[1] = \out12[1]~output_o ;

assign out12[2] = \out12[2]~output_o ;

assign out12[3] = \out12[3]~output_o ;

assign out12[4] = \out12[4]~output_o ;

assign out12[5] = \out12[5]~output_o ;

assign out12[6] = \out12[6]~output_o ;

assign out12[7] = \out12[7]~output_o ;

assign out12[8] = \out12[8]~output_o ;

assign out12[9] = \out12[9]~output_o ;

assign out12[10] = \out12[10]~output_o ;

assign out12[11] = \out12[11]~output_o ;

endmodule
